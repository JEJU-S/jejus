<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=7a8olp7fvf"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    
    <title> Edit <%=totPlan.title%> | Sample </title>
</head>
<body class="container">
    <!--hidden(javascript 값 위해 설정한 것)-->
    <div id="plan-id" hidden><%=totPlan._id%></div>
    <div id="user-name" hidden><%=user.name%></div>
    <div id="user-id" hidden><%=user._id%></div>
    <header>
        <h1><%=totPlan.title%></h1>
        참여자 :
        <%totPlan.participants.forEach(function(participant){%>
            <%=participant.name%>
        <%})%>
        <button class="inv-btn">초대</button>
        
        <form class="email-form" style="display : none">
            <input type="email", placeholder="gmail을 입력하세요" name="gmail">
            <input type="submit" value="초대장 전송">
            <input type= "reset" value="취소">
        </form>
        
        <div class="plan-date">
            출발일 : <span><%="2021-11-23"%></span>
            도착일 : <span><%="2021-11-25"%></span>
        </div>
        
        <form class="date-form">
            출발일 : <input type="date" name="start-date">
            도착일 : <input type="date" name="end-date">
            <input type="submit">
        </form>
        
    </header>
    <main>
        
        <ul id="recommand-list">
        </ul>

        <form id="search-form">
            <input type="text", name="search-input", placeholder="검색어를 입력하세요", required>
            <input type="submit", value = "검색">
        </form>

        <ul id="search-result-list">
        </ul>

        <div id="map" class="map" style ="width:800px; height:400px;"></div>


        <div class="place-box">
        </div>

        <ul id="place-list">
        </ul>

        <div>
            <ul id="chatting-list">
            </ul>
            <form id="chatting-form">
                <input type="text" name="chatting-input", placeholder="메시지 전송하기", required>
                <input type="submit", value="전송">
            </form>
        </div>

        <button>저장하기</button>
    </main>
    <footer>
        &copy; <%=new Date().getFullYear()%> Sample Project
    </footer>
</body>

<script>
    
    //room 생성
    const planId = document.querySelector("#plan-id").innerHTML;
    const userName = document.querySelector("#user-name").innerHTML;

    const planDate = document.querySelector(".plan-date");
    const placeBox = document.querySelector(".place-box");
    
       // client 소켓 생성
    const socket = io(); 
    //*********init*********//   
    socket.emit("join_room", planId, userName, init); // 방 만들기(planid 별 방 만들기)
    function init(){

        // 날짜별 div 박스 생성
        const startDate = new Date(planDate.querySelectorAll("span")[0].innerText);
        const endDate = new Date(planDate.querySelectorAll("span")[1].innerText);
        const daylength = Math.abs(endDate - startDate)/(1000 * 3600 *24);

        for(let dayIndex = 1; dayIndex <= daylength + 1; dayIndex++){  
            console.log(dayIndex); 

            //날짜별 dayPlanDiv 생성
            const dayPlanDiv = document.createElement("div");
            dayPlanDiv.className = "day-plan";

            //맨 처음 날짜를 표시해 줄 dateDisplay div 생성 후 p 요소로 날짜 추가 
            const dayDisplay = document.createElement("div");
            dayDisplay.className = "display-date";
            const date = document.createElement("p");
            
            date.innerHTML = `day ${dayIndex}`;
            dayDisplay.append(date);
            dayPlanDiv.append(dayDisplay);

            placeBox.append(dayPlanDiv);
        }

        //데이터베이스에서 꺼내온 것 초기화
    }


    // element 요소
    //header
    const invitationBtn = document.querySelector(".inv-btn");
    const emailForm = document.querySelector(".email-form");
    

    const recommandListUl = document.querySelector("#recommand-list");
    const searchForm = document.querySelector("#search-form");
    const searchResultUl = document.querySelector("#search-result-list");
    const placeListUl = document.querySelector("#place-list");
    
    const chattingForm = document.querySelector("#chatting-form");
    const chattingListUl = document.querySelector("#chatting-list");
    
    //const dateForm = document.querySelector(".date-form");

    //************초대장 전송**********************
    function showInvitationForm(){
        emailForm.style.display = "block";
    }

    function sendInvitationToGmail(event){
        event.preventDefault();

        const regex = new RegExp(/@gmail.com$/);

        const gmailInput = emailForm.querySelector("input[type='email']");
        console.log(gmailInput.value);

        if(!regex.test(gmailInput.value)){
            alert("@gmail.com 형식으로 입력해주세요");
            return;
        }
        //server로 키워드 전송
        socket.emit("send_inviataion", gmailInput.value);
        emailForm.style.display = "none";
        gmailInput.value = "";
    }

    function closeInvitaitonToGmail(event){
        event.preventDefault();
        const gmailInput = emailForm.querySelector("input[type='email']");
        gmailInput.value ="";
        emailForm.style.display = "none";
    }

    invitationBtn.addEventListener("click", showInvitationForm);
    emailForm.addEventListener("submit", sendInvitationToGmail);
    emailForm.addEventListener("reset", closeInvitaitonToGmail);
    
    //************날짜 구현*****************

    function checkDate(event){
        event.preventDefault();
        const startDate = dateForm.querySelector("input[name='start-date']");
        const endDate = dateForm.querySelector("input[name='end-date']");

        const start = new Date(startDate.value);
        const end = new Date(endDate.value);

        socket.emit("change_date", start, end, planId);
    }   

    function startDateChange(){
        const startDate = dateForm.querySelector("input[name='start-date']");
        const endDate = dateForm.querySelector("input[name='end-date']");
        endDate.min = startDate.value;
        
        const minDate = new Date(startDate.value);
        const maxDate = new Date();

        maxDate.setDate(minDate.getDate() + 4);
        endDate.max = `${maxDate.getFullYear()}-${maxDate.getMonth() + 1}-${maxDate.getDate()}`;
    }

    dateForm.addEventListener("submit", checkDate);
    dateForm.querySelector("input[name='start-date']").addEventListener("change", startDateChange);

    //**********지도*****************************
    const markerList = [];
    const mapOptions = {
        center : new naver.maps.LatLng(33.50088510909299, 126.52906251498592),
        zoom : 10
    };
    const map = new naver.maps.Map(document.getElementById("map"), mapOptions);

    //**********검색 구현**********************
    function submitSearchKeyword(event){
        event.preventDefault();
        const input = searchForm.querySelector("input");
    
        //server로 키워드 전송
        socket.emit("search_keyword", input.value);
        input.value = "";
    }

    //검색 결과 리스트 생성
    function printSearchResultList(searchResults){
        while(searchResultUl.hasChildNodes()){
            searchResultUl.removeChild(searchResultUl.firstChild);
        }
        if(searchResults.length == 0){
            alert("검색 결과가 없습니다");
            return;
        }
        searchResults.forEach((result) => {
            console.log(result);

            const li = document.createElement("li");
            li.className = "result";
            // 임시로 넣어 둠(클릭 범위 확인)
            li.style.backgroundColor = "#cccccc";

            const span = document.createElement("span");
            span.className = "obj-name";
            span.append(result.place_name);

            const p = document.createElement("p");
            p.className = "obj-adress";
            p.append(result.address_name);

            const coordinates = {
                x : result.x,
                y : result.y
            };

            const hidden = document.createElement("input");
            hidden.setAttribute("type", "hidden");
            hidden.setAttribute("value", JSON.stringify(coordinates));
            li.append(span);
            li.append(p);
            li.append(hidden);

            searchResultUl.append(li);
        })
    }

    //************추천 list 구현**************************
    //recommandListUl

//*********유저 리스트 구현 - 날짜별 생성*******************

    function createDateDiv(start, end){

        // temp 지점 => start 지점으로 정해줌
        let tempDate = new Date(start);
        const startDate = new Date(start);
        const endDate = new Date(end);

        //start부터 end까지 for문 구현
        for(tempDate; tempDate <= endDate; tempDate.setDate(tempDate.getDate() + 1))
        {
            console.log("temp date : ", tempDate);
        }
    }
    //socket.on("create_date_div", createDateDiv);


    //************user place list 구현*******************************
    // <추천 리스트 & 검색리스트 구분 없이 사용가능하도록>
    function sendPlaceToServer(event){
        // 클릭한 li 가져옴
        const li = event.target.closest('li');
        if(!li) return;
        const coordinates = JSON.parse(li.querySelector("input[type='hidden']").value);
       
        for(let i =0; i < markerList.length; i++){
            if(markerList[i]["position"].x == coordinates.x && markerList[i]["position"].y == coordinates.y){
                alert("이미 추가되었습니다");
                return;
            }
        }

        //데이터베이스로 넘겨줄 obj
        const placeObj = {
            name : li.querySelector(".obj-name").innerHTML,
            address : li.querySelector(".obj-adress").innerHTML,
            coordinates : coordinates
        }

        console.log(placeObj);
        socket.emit("add_to_placelist", placeObj, planId);
    }

    // map에 마커 추가
    function addPlaceToMap(placeObj){
        const {coordinates} = placeObj; 
        console.log("here : ", parseFloat(coordinates.x), " , " , parseFloat(coordinates.y));
        
        markerList.push(new naver.maps.Marker({  
            position : new naver.maps.LatLng(
                parseFloat(coordinates.y), parseFloat(coordinates.x)
            ),
            map : map
        }));
        console.log("add markerList : ", markerList);
        addPlaceToPlaceList(placeObj);
    }

    // userplace list에 추가
    function addPlaceToPlaceList(placeObj){
        console.log(placeObj);

        const {name, address, coordinates} = placeObj;
        const li = document.createElement("li");
        const button = document.createElement("button");
        const span = document.createElement("span");
        const p = document.createElement("p");
        const hidden = document.createElement("input");
        hidden.setAttribute("type", "hidden");
        hidden.setAttribute("value", JSON.stringify(coordinates));
        
        button.className = "del-btn";
        button.innerHTML = "❌";
        span.innerHTML = name;
        p.innerHTML = address;

        li.append(button);
        li.append(span);
        li.append(p);
        li.append(hidden);

        placeListUl.append(li);
    }

    function clickDelBtnUserPlaceList(event){
        const li = event.target.closest('li');
        const button = event.target.closest('button');
        if(!button) return;

        console.log(li);
        console.log(button);
        const coordinates = JSON.parse(li.querySelector("input[type='hidden']").value);
        socket.emit("del_from_placelist", coordinates, planId);
    }

    function delFromUserPlaceList(coordinates){
        //marker 삭제
        for(let i=0; i < markerList.length; i++){
            console.log("markerList : ", markerList);

            console.log("cur marker :", markerList[i]);
            if(markerList[i]["position"].x == coordinates.x && markerList[i]["position"].y == coordinates.y){
                console.log("del this marker :", markerList[i]);
                markerList[i].setMap(null);
                markerList.splice(i, 1);
            }
        }
        //list에서 삭제
        const placeListLi = placeListUl.querySelectorAll("li");
        placeListLi.forEach((li , index) => {
            const cor = JSON.parse(li.querySelector("input[type='hidden']").value);
            if(cor.x === coordinates.x && cor.y === coordinates.y){
                li.remove();
            }
        })
    }

    /*****************채팅 구현**********************/
    function printMessage(msgObj, sendMsg){
        const li = document.createElement('li');
        if(sendMsg){
            const span = document.createElement('span');
            const p = document.createElement('p');
            span.innerHTML = msgObj.userName;
            p.innerHTML = msgObj.message;
            li.append(span);
            li.append(p);
        }
        else{
            li.append(msgObj.message);
        }
        chattingListUl.append(li);
    }

    function printChattingMessage(msgObj){
        printMessage(msgObj, true);
    }

    function printServerMessage(msgObj){
        printMessage(msgObj, false);
    }

    function sendChattingMessage(){
        event.preventDefault();
        const input = chattingForm.querySelector("input");
        socket.emit("send_chatting_msg", {
            roomId : planId,
            userName : userName, 
            message : input.value 
        });
        input.value = "";
    }

    socket.on("server_msg", printServerMessage);
    chattingForm.addEventListener("submit", sendChattingMessage);
    socket.on("print_chatting_msg", printChattingMessage);

  
    //eventListner
    searchForm.addEventListener("submit", submitSearchKeyword);
    searchResultUl.addEventListener("click", sendPlaceToServer);
    placeListUl.addEventListener("click", clickDelBtnUserPlaceList);

    // sever에서 받기
    socket.on("search_result", printSearchResultList);
    socket.on("place_add_map", addPlaceToMap);
    socket.on("place_delete_map", delFromUserPlaceList);

    
</script>
</html>