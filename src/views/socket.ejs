<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=7a8olp7fvf"></script>
    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    <title>Document</title>
</head>
<body>
    <!--hidden(javascript 값 위해 설정한 것)-->
    <div id="plan-id" hidden><%=totPlan._id%></div>
    <header>
        <h1><%=totPlan.title%></h1>
        
    </header>
    <!--다 불러올 필요 없고 나중에 수정할거임
    <div id="plan" hidden><%-JSON.stringify(totPlan)%></div>
    -->
    <form id="search-form">
        <input type="text", name="search-input", placeholder="검색어를 입력하세요", required>
        <input type="submit", value = "검색">
    </form>
    <ul id="search-result-list">
    </ul>
    <div id="map" class="map" style ="width:800px; height:400px;"></div>
    
    <ul id="place-list">
    </ul>
</body>

<script>
    //room 생성
    const planId = document.querySelector("#plan-id").innerHTML;
    // element 요소
    const searchForm = document.querySelector("#search-form");
    const searchResultUl = document.querySelector("#search-result-list");
    const placeListUl = document.querySelector("#place-list");

    //map 관리
    const markerList = [];
    const mapOptions = {
        center : new naver.maps.LatLng(33.50088510909299, 126.52906251498592),
        zoom : 10
    };
    const map = new naver.maps.Map(document.getElementById("map"), mapOptions);
    
    // client 소켓 생성
    const socket = io(); 
    //*********init*********//   
    socket.on("join_room", planId); // 방 만들기(planid 별 방 만들기)
    function init(){
        //데이터베이스에서 꺼내온 것 초기화 해줘야 함 
    }
    //************************//

    //place result 데이터 리스트 생성
    function printSearchResult(searchResults){
        while(searchResultUl.hasChildNodes()){
            searchResultUl.removeChild(searchResultUl.firstChild);
        }
        searchResults.forEach((result) => {
            console.log(result);

            const li = document.createElement("li");
            li.className = "result";
            // 임시로 넣어 둠(클릭 범위 확인)
            li.style.backgroundColor = "#cccccc";

            const span = document.createElement("span");
            span.className = "obj-name";
            span.append(result.place_name);

            const p = document.createElement("p");
            p.className = "obj-adress";
            p.append(result.address_name);

            const coordinates = {
                x : result.x,
                y : result.y
            };
            const hidden = document.createElement("input");
            hidden.setAttribute("type", "hidden");
            hidden.setAttribute("value", JSON.stringify(coordinates));
            li.append(span);
            li.append(p);
            li.append(hidden);

            searchResultUl.append(li);
        })
    }
    
    // 서버에 전송하기
    // list에 이미 있으면 넣으면 안됨
    function addSearchResult(event){
        const li = event.target.closest('li');
        if(!li) {
            console.log("not li");
            return;
        }
       const coordinates = JSON.parse(li.querySelector("input[type='hidden']").value);
       
        for(let i =0; i < markerList.length; i++){
            if(markerList[i]["position"].x == coordinates.x && markerList[i]["position"].y == coordinates.y){
                alert("이미 추가되었습니다");
                return;
            }
        }
       
       const searchResult = {
            name : li.querySelector(".obj-name").innerHTML,
            address : li.querySelector(".obj-adress").innerHTML,
            coordinates : coordinates
        }
        console.log(searchResult);
        socket.emit("add_to_placelist", searchResult);
    }

    
    // map에 마커 추가
    function addPlaceToMap(searchResult){
        const {coordinates} = searchResult; 
        console.log("here : ", parseFloat(coordinates.x), " , " , parseFloat(coordinates.y));
        
        markerList.push(new naver.maps.Marker({  
            position : new naver.maps.LatLng(
                parseFloat(coordinates.y), parseFloat(coordinates.x)
            ),
            map : map
        }));
        addPlaceToPlaceList(searchResult);
    }

    // userplace list에 추가
    function addPlaceToPlaceList(placeResult){
        console.log(placeResult);

        const {name, address, coordinates} = placeResult;
        const li = document.createElement("li");
        const button = document.createElement("button");
        const span = document.createElement("span");
        const p = document.createElement("p");
        const hidden = document.createElement("input");
        hidden.setAttribute("type", "hidden");
        hidden.setAttribute("value", JSON.stringify(coordinates));
        
        button.className = "del-btn";
        button.innerHTML = "❌";
        span.innerHTML = name;
        p.innerHTML = address;

        li.append(button);
        li.append(span);
        li.append(p);
        li.append(hidden);

        placeListUl.append(li);
    }

    //map에서 마커 제거
    function delPlaceFromMap(event){
        
    }

    function delePlaceFromList(event){
        const li = event.target.closest('li');
        const button = event.target.closest('button');
        if(!button) {
            console.log("not button");
            return;
        }
        console.log(li);
        console.log(button);

        const coordinates = JSON.parse(li.querySelector("input[type='hidden']").value);
        //socket.emit("del_from_placelist", coordinates);
    }

    /*socket */
    //검색 입력
    function handleSearchSubmit(event){
        event.preventDefault();
        const input = searchForm.querySelector("input");

        //server로 키워드 전송
        socket.emit("search_keyword", input.value);
        input.value = "";

    }

    //eventListner
    searchForm.addEventListener("submit", handleSearchSubmit);
    searchResultUl.addEventListener("click", addSearchResult);

    placeListUl.addEventListener("click", delePlaceFromList);

    // sever에서 데이터 받기
    socket.on("search_result", printSearchResult);
    socket.on("place_add_map", addPlaceToMap);

    
</script>
</html>